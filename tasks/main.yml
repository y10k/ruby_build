- name: packages (Debian)
  become: yes
  apt:
    name: "{{ item }}"
  with_items:
    - "{{ ruby_build_required_packages_debian }}"
    - "{{ ruby_build_optional_packages_debian }}"
  when: ansible_os_family == "Debian"

- name: packages (RedHat)
  become: yes
  yum:
    name: "{{ item }}"
  with_items:
    - "{{ ruby_build_required_packages_redhat }}"
    - "{{ ruby_build_optional_packages_redhat }}"
  when: ansible_os_family == "RedHat"

- name: packages (other OS family)
  become: yes
  package:
    name: "{{ item }}"
  with_items:
    - "{{ ruby_build_required_packages_other_os_family }}"
    - "{{ ruby_build_optional_packages_other_os_family }}"
  when: not(ansible_os_family in ("Debian", "RedHat"))

- name: "local download directory {{ ruby_build_download_local_dir }}"
  local_action:
    module: file
    state: directory
    follow: yes
    path: "{{ ruby_build_download_local_dir }}"
    mode: 0755

- name: "download from {{ ruby_build_download_url }}/ruby-{{ ruby_build_version }}.tar.gz"
  local_action:
    module: get_url
    url: "{{ ruby_build_download_url }}/ruby-{{ ruby_build_version }}.tar.gz"
    dest: "{{ ruby_build_download_local_dir }}/ruby-{{ ruby_build_version }}.tar.gz"
    checksum: "{{ ruby_build_download_checksum }}"

- name: "remote unarchive directory {{ ruby_build_unarchive_remote_dir }}"
  file:
    state: directory
    follow: yes
    path: "{{ ruby_build_unarchive_remote_dir }}"
    mode: 0755

- name: "ruby environment of {{ ruby_build_interpreter_path }}"
  script: ruby_env.sh "{{ ruby_build_interpreter_path }}"
  register: ruby_build_env_result

- name: ruby environment result parse
  set_fact:
    ruby_build_env: "{{ ruby_build_env_result.stdout | from_yaml }}"

- name: installed ruby version
  debug: var=ruby_build_env.rbconfig.RUBY_PROGRAM_VERSION

- name: ruby build
  block:
    - name: ruby build version
      debug: var=ruby_build_version

    - name: clear previous build
      file:
        state: absent
        path: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"
      when: ruby_build_clear_previous_build

    - name: "unarchive source code from ruby-{{ ruby_build_version }}.tar.gz"
      unarchive:
        src: "{{ ruby_build_download_local_dir }}/ruby-{{ ruby_build_version }}.tar.gz"
        dest: "{{ ruby_build_unarchive_remote_dir }}"
        keep_newer: yes

    - name: "configure {{ ruby_build_configure_options }}"
      command: "./configure {{ ruby_build_configure_options }}"
      args:
        chdir: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"

    - name: "make {{ ruby_build_make_options }}"
      command: "make {{ ruby_build_make_options }}"
      args:
        chdir: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"

    - name: make test
      command: make test
      args:
        chdir: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"

    - name: make install
      become: yes
      command: make install
      args:
        chdir: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"

    - name: make clean
      command: make clean
      args:
        chdir: "{{ ruby_build_unarchive_remote_dir }}/ruby-{{ ruby_build_version }}"
      when: ruby_build_make_clean
  when: >-
    not(ruby_build_env.ruby_exists) or
    ruby_build_env.rbconfig.RUBY_PROGRAM_VERSION != (ruby_build_version | regex_replace('-preview.*$', '')) or
    ruby_build_overwrite_install

# Local Variables:
# indent-tabs-mode: nil
# End:
